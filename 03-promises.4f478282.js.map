{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAe,kBAClCC,EAASF,SAASC,cAAe,iBACjCE,EAAWH,SAASC,cAAe,mBAkBzC,SAASG,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAOtC,OANIF,EACFV,EAAAa,OAAOC,QAAQ,sBAAqCC,OAAfP,EAAS,QAAYO,OAANN,EAAM,OAE1DT,EAAAa,OAAOG,QAAQ,oBAAmCD,OAAfP,EAAS,QAAYO,OAANN,EAAM,OAGnD,IAAIQ,SAAQ,SAACC,EAASC,GACvBT,GACFQ,EAAQ,CAAEV,WAAUC,UAEtBU,EAAO,CAAEX,WAAUC,aAClBW,MAAK,SAAAC,G,IAAGC,EAAQD,EAARb,SAAUe,EAAKF,EAALZ,MACnBe,QAAQC,IAAI,uBAAwCV,OAAfO,EAAS,QAAYP,OAANQ,EAAM,UAE3DG,OAAM,SAAAL,G,IAAGC,EAAQD,EAARb,SAAUe,EAAKF,EAALZ,MAClBe,QAAQC,IAAI,sBAAqCV,OAAfO,EAAS,QAAYP,OAANQ,EAAM,UAlC5CpB,SAASC,cAAe,SAEhCuB,iBAAkB,UAEzB,SAAkBC,GAChBA,EAAMC,iBAKN,IAJA,IAAMpB,EAAQqB,SAAS5B,EAAQ6B,MAAO,IAChCC,EAAOF,SAASzB,EAAO0B,MAAO,IAC9BE,EAASH,SAASxB,EAASyB,MAAO,IAE/BG,EAAI,EAAGA,EAAID,EAAQC,IAC1B,GAAU,IAANA,EAAJ,CACA,IAAMC,EAAOD,EAAIF,EAAOvB,EACxB2B,WAAW7B,EAAe4B,EAAMD,EAAI,EAAGC,QAFxBC,WAAW7B,EAAeE,EAAOyB,EAAI,EAAGzB,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst delayEl = document.querySelector(`[name=\"delay\"]`);\nconst stepEl = document.querySelector(`[name=\"step\"]`);\nconst amountEl = document.querySelector(`[name=\"amount\"]`);\nconst formEl = document.querySelector(`.form`);\n\nformEl.addEventListener(`submit`, onSubmit)\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const delay = parseInt(delayEl.value, 10);\n  const step = parseInt(stepEl.value, 10);\n  const amount = parseInt(amountEl.value, 10);\n\n  for (let i = 0; i < amount; i++) {\n    if (i === 0) { setTimeout(createPromise, delay, i + 1, delay); continue}\n    const time = i * step + delay;\n    setTimeout(createPromise, time, i + 1, time)\n  }\n}\n  \nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    Notify.success(`Fullfilled promise ${position} in ${delay}ms`);\n  } else {\n    Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n  }\n\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay })\n    }\n    reject({ position, delay })\n  }).then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n}\n\n\n  \n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$delayEl","document","querySelector","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Notify","success","concat","failure","Promise","resolve","reject","then","param","_$position","_$delay","console","log","catch","addEventListener","event","preventDefault","parseInt","value","step","amount","i","time","setTimeout"],"version":3,"file":"03-promises.4f478282.js.map"}